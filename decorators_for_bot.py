from aiogram.types import CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardMarkup, InlineKeyboardButton
import asyncio
from functools import wraps
import logging
import os

BASE_DIR = os.getcwd()
file_attachments = {
    "add_object": os.path.join(BASE_DIR, "files", "–®–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –æ–±—ä–µ–∫—Ç–∞–º.xlsx"),
    "instruction_schedule": os.path.join(BASE_DIR, "files", "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è  –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ-—Å–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫___.pdf"),
    "add_user": os.path.join(BASE_DIR, "files", "–®–∞–±–ª–æ–Ω –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.xlsx"),
    "tim1": os.path.join(BASE_DIR, "files", "–û—Ç—á–µ—Ç_–ø–æ_–¢–ò–ú_–±—ã–≤—à_–æ—Ç—á–µ—Ç_–¶–ö–°_–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è_‚Äî_11_07_24.pdf"),
    "tim2": os.path.join(BASE_DIR, "files", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¢–ò–ú –∏ –¶–ò–ú –≤ –æ–±—ä–µ–∫—Ç.pdf"),
    "road": os.path.join(BASE_DIR, "files", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ–æ—Ç—á–µ—Ç–∞ –≤ –æ–±—ä–µ–∫—Ç.pdf"),
    "dock_1": os.path.join(BASE_DIR, "files", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –æ–±—ä–µ–∫—Ç.pdf"),
    "vis_1": os.path.join(BASE_DIR, "files", "–®–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞.xlsx"),
    "vis_2": os.path.join(BASE_DIR, "files",  "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã.pdf"),
    "object_card_1": os.path.join(BASE_DIR, "files",  "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –æ–±—ä–µ–∫—Ç–∞.pdf"),
    "electron1": os.path.join(BASE_DIR, "images", "electron.png"),
    "construction_control11": os.path.join(BASE_DIR, "files", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –º–æ–¥—É–ª–µ –∑–∞–∫–∞–∑—á–∏–∫–∞.pdf"),
    "upload_pd_rd11": os.path.join(BASE_DIR, "files", "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –ü–î –∏ –†–î –≤ –º–æ–¥—É–ª–µ –∑–∞–∫–∞–∑—á–∏–∫–∞.pdf"),
    "sign_participants11": os.path.join(BASE_DIR, "files", "–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –ø—Ä–∏–∫–∞–∑–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∏ –≤ –ø—Ä–æ–µ–∫—Ç–∞—Ö.pdf"),
    "exchange_docs11": os.path.join(BASE_DIR, "files", "–û–±–º–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.pdf"),

}

# üìå –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
def catch_exceptions(default_message="‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."):
    def decorator(func):
        @wraps(func)
        async def wrapper(*args, **kwargs):
            try:
                return await func(*args, **kwargs)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –≤ {func.__name__}: {e}")
                call = args[0]
                await call.message.answer(default_message)
        return wrapper
    return decorator


def check_file_exists(file_key):
    def decorator(func):
        @wraps(func)
        async def wrapper(call: CallbackQuery, *args, **kwargs):
            file_path = file_attachments.get(file_key)
            if not file_path:
                await call.message.answer("‚ö†Ô∏è –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
                return
            return await func(call, file_path, *args, **kwargs)
        return wrapper
    return decorator



def show_progress(total_steps=10, step_delay=0.1):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∑–∞–¥–∞—á—É –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º."""

    def decorator(func):
        @wraps(func)
        async def wrapper(call: CallbackQuery, *args, **kwargs):
            spinner = ["‚è≥", "‚åõ"]
            progress_message = await call.message.answer(
                f"{spinner[0]} –ó–∞–≥—Ä—É–∑–∫–∞...",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚¨õ" * total_steps + " –ó–∞–≥—Ä—É–∑–∫–∞... 0%", callback_data="loading")]
                ])
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ —Ñ–æ–Ω–µ
            task = asyncio.create_task(func(call, *args, **kwargs))

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å, –ø–æ–∫–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
            for i in range(1, total_steps + 1):
                await asyncio.sleep(step_delay)
                progress_percent = i * (100 // total_steps)
                filled_blocks = "üü©" * i
                empty_blocks = "‚¨õ" * (total_steps - i)
                progress_bar = filled_blocks + empty_blocks
                current_spinner = spinner[i % 2]

                await progress_message.edit_text(
                    f"{current_spinner} –ó–∞–≥—Ä—É–∑–∫–∞...",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text=f"{progress_bar} –ó–∞–≥—Ä—É–∑–∫–∞... {progress_percent}%",
                                              callback_data="loading")]
                    ])
                )

                # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è ‚Äî –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞
                if task.done():
                    break

            await task  # –î–æ–∂–∏–¥–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
            await progress_message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä

        return wrapper

    return decorator

