from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import CommandStart
import asyncio
import logging
from datetime import datetime, timedelta

logging.basicConfig(level=logging.INFO)

TOKEN = "7832695484:AAF48z_ifKvpO0Yc9oYiY1QBzQcvYnYiciA"
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –•—Ä–∞–Ω–∏–º –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–≤—ã—á–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_habits = {}

users_data = {}
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="menu:reminders")],
        [InlineKeyboardButton(text="üìà –ö–æ–Ω—Ç—Ä–æ–ª—å –ø—Ä–∏–≤—ã—á–µ–∫", callback_data="menu:habits")],
        [InlineKeyboardButton(text="üìÖ –£–º–Ω—ã–π –±—É–¥–∏–ª—å–Ω–∏–∫", callback_data="menu:alarm")],
        [InlineKeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã", callback_data="menu:advice")],
    ])

@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.", reply_markup=main_menu())

# –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–¥–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
@dp.callback_query(lambda c: c.data == "menu:habits")
async def habit_control(call: types.CallbackQuery):
    await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å') –∏ —Å—É–º–º—É —ç–∫–æ–Ω–æ–º–∏–∏ –≤ –¥–µ–Ω—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 300):")
    user_habits[call.from_user.id] = {"start_date": datetime.now(), "habit": None, "saving": 0}

@dp.message()
async def habit_entry(message: types.Message):
    user_id = message.from_user.id
    if user_id in user_habits and not user_habits[user_id]["habit"]:
        try:
            habit, saving = message.text.rsplit(" ", 1)
            saving = int(saving)
            user_habits[user_id]["habit"] = habit
            user_habits[user_id]["saving"] = saving
            await message.answer(f"–¢—ã —Ä–µ—à–∏–ª {habit}! –Ø –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ —ç—Ç–∏–º! üí™")
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤—ã—á–∫—É –∏ —Å—É–º–º—É —ç–∫–æ–Ω–æ–º–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–±—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å 300'")

# –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
async def send_daily_update():
    while True:
        for user_id, data in user_habits.items():
            days = (datetime.now() - data["start_date"]).days
            total_saving = days * data["saving"]
            await bot.send_message(user_id, f"–¢—ã —Å–¥–µ—Ä–∂–∏–≤–∞–µ—à—å—Å—è —É–∂–µ {days} –¥–Ω–µ–π! –≠–∫–æ–Ω–æ–º–∏—è: {total_saving} —Ä—É–±.")
        await asyncio.sleep(86400)  # –ñ–¥–µ–º 24 —á–∞—Å–∞

@dp.callback_query(lambda c: c.data == "smart_alarm")
async def set_alarm(call: types.CallbackQuery):
    await call.message.answer("–ù–∞–ø–∏—à–∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±—è —Ä–∞–∑–±—É–¥–∏—Ç—å (—Ñ–æ—Ä–º–∞—Ç HH:MM)")
    users_data[call.from_user.id] = {"state": "waiting_for_alarm"}

@dp.message()
async def handle_messages(message: types.Message):
    user_id = message.from_user.id
    if user_id in users_data and users_data[user_id].get("state") == "waiting_for_alarm":
        try:
            alarm_time = datetime.strptime(message.text, "%H:%M").time()
            users_data[user_id] = {"alarm_time": alarm_time}
            await message.answer(f"–ë—É–¥–∏–ª—å–Ω–∏–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {message.text}")
            await check_alarm(user_id, alarm_time)
        except ValueError:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

async def check_alarm(user_id, alarm_time):
    while True:
        now = datetime.now().time()
        if now.hour == alarm_time.hour and now.minute == alarm_time.minute:
            await bot.send_message(user_id, "‚è∞ –ü–æ–¥—ä–µ–º! –í—Ä–µ–º—è –≤—Å—Ç–∞–≤–∞—Ç—å!")
            break
        await asyncio.sleep(30)

# –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö
@dp.callback_query(lambda c: c.data == "meetings")
async def meetings(call: types.CallbackQuery):
    await call.message.answer("–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤—Å—Ç—Ä–µ—á–∏ (—Ñ–æ—Ä–º–∞—Ç DD.MM HH:MM)")
    users_data[call.from_user.id] = {"state": "waiting_for_meeting"}

# –ú–æ—Ç–∏–≤–∞—Ü–∏—è
@dp.callback_query(lambda c: c.data == "motivation")
async def motivation(call: types.CallbackQuery):
    await call.message.answer("–ö–∞–∫ —Ç–≤–æ–∏ —É—Å–ø–µ—Ö–∏ —Å–µ–≥–æ–¥–Ω—è?")
    users_data[call.from_user.id] = {"state": "waiting_for_progress"}

@dp.message()
async def handle_progress(message: types.Message):
    user_id = message.from_user.id
    if user_id in users_data and users_data[user_id].get("state") == "waiting_for_progress":
        if "–ø–ª–æ—Ö–æ" in message.text.lower():
            await message.answer("–ù–µ —Å–¥–∞–≤–∞–π—Å—è! –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ª—É—á—à–µ! –í–æ—Ç –∞–Ω–µ–∫–¥–æ—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è: \n- –î–æ–∫—Ç–æ—Ä, —É –º–µ–Ω—è –±–µ—Å—Å–æ–Ω–Ω–∏—Ü–∞. \n- –°—á–∏—Ç–∞–π—Ç–µ –æ–≤–µ—Ü. \n- –ù–µ –ø–æ–º–æ–≥–∞–µ—Ç! \n- –¢–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—á–∏—Ç–∞—Ç—å –¥–æ–ª–≥–∏. –ó–∞—Å–Ω–µ—Ç–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ!")
        else:
            await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–µ—Ä–∂–∏ —Ç–µ–º–ø!")

# –°–æ–≤–µ—Ç—ã –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –∏ –ø–∏—Ç–∞–Ω–∏—é
@dp.callback_query(lambda c: c.data == "advice")
async def advice(call: types.CallbackQuery):
    advices = [
        "–ü–µ–π –±–æ–ª—å—à–µ –≤–æ–¥—ã –∏ –≤—ã—Å—ã–ø–∞–π—Å—è!",
        "–ù–µ —Å—Ä–∞–≤–Ω–∏–≤–∞–π —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏, —Ç–≤–æ–π –ø—É—Ç—å —É–Ω–∏–∫–∞–ª–µ–Ω!",
        "–°—Ç–∞—Ä–∞–π—Å—è –µ—Å—Ç—å –±–æ–ª—å—à–µ –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤!"
    ]
    await call.message.answer(advices[datetime.now().second % len(advices)])




if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(send_daily_update())
    loop.run_until_complete(dp.start_polling(bot))
