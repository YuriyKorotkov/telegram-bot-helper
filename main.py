from middlewares.user_tracker import UserTrackerMiddleware
import asyncio
from utils import *
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile
)
from handlers import (
    add_tim_1,
    add_tim_2,
    add_contr,
    add_vis_11,
    add_vis_22,
    send_add_object_file,
    forgot_password_handler,
    send_keg_instruction,
    back_to_previous_menu,
    send_add_user_file,
    send_subscription_links,
    send_documents_link,
    issue_digital_signature,
    info1,
    send_road,
    add_dock_1,
    object_card,
    construction_control1,
    sign_participants1,
    upload_pd_rd1,
    exchange_docs1,
    block_user1,
    tech_support1
)
from utils import main_menu, return_to_main_menu, return_to_main_menu7
from aiogram.filters import CommandStart
sys.path.append(os.path.join(os.path.dirname(__file__), 'text1.py'))
from text1 import text_answers
import logging
from database import init_db, add_user
from dotenv import load_dotenv


load_dotenv()
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

ADMIN_IDS = [1316342598]

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)

dp = Dispatcher()
dp.message.middleware(UserTrackerMiddleware())
dp.callback_query.middleware(UserTrackerMiddleware())

class Feedback(StatesGroup):
    waiting_for_message = State()

logging.basicConfig(level=logging.INFO)


@dp.message(CommandStart())
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"

    await add_user(user_id, username)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! ü§ñ\n"
        "–≠—Ç–æ —á–∞—Ç-–±–æ—Ç –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –≤ –ò–°–£–ü üèóÔ∏è\n\n"
        "<a href='https://t.me/+ObD-6zTF1ngzNjgy'>üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—á–∏–π —á–∞—Ç</a>",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

@dp.callback_query()
async def menu_handler(call: CallbackQuery, state: FSMContext):
    try:
        if call.data == "menu:feedback":
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]]
            )

            try:
                await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            await bot.send_message(
                call.message.chat.id,
                "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,\n –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
                reply_markup=keyboard
            )
            await state.set_state(Feedback.waiting_for_message)

        elif call.data == "menu:add_object_user":
            await state.update_data(previous_menu="menu:add_object_user")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:add_user")],
                [InlineKeyboardButton(text="üè¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="submenu:add_object")],
                [InlineKeyboardButton(text="üîë –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="submenu:forgot_password")],
                [InlineKeyboardButton(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:block_user")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
            ])
            await call.message.edit_text("‚¨áÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

        elif call.data == "menu:about_isup":
            await state.update_data(previous_menu="menu:about_isup")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåü –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–°–£–ü", callback_data="submenu:advantages")],
                [InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –ù–ü–ê", callback_data="submenu:documents")],
                [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="submenu:info")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
            ])
            await call.message.edit_text("‚¨áÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–°–£–ü? / –ù–ü–ê: ‚¨áÔ∏è", reply_markup=keyboard)

        elif call.data == "submenu:advantages":
            await state.update_data(previous_menu="menu:about_isup")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
            ])
            await call.message.edit_text(
                text_answers["what_is_isup"],
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        elif call.data == "menu:instruction_schedule":
            await state.update_data(previous_menu="menu:instruction_schedule")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–∞", callback_data="submenu:fill_object_card")],
                [InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ-—Å–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫", callback_data="submenu:keg")],
                [InlineKeyboardButton(text="üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="submenu:add_photo_docs")],
                [InlineKeyboardButton(text="üìë –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –Ω–∞ –ü–ò–† –∏ –°–ú–†", callback_data="submenu:add_contr_1")],
                [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", callback_data="submenu:add_docs")],
                [InlineKeyboardButton(text="üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –¢–ò–ú", callback_data="submenu:fill_tim_report")],
                [InlineKeyboardButton(text="üìû –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="submenu:tech_support")],
                [InlineKeyboardButton(text="üßë‚Äçüíº –ú–æ–¥—É–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="submenu:customer_module")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
            ])
            await call.message.edit_text("‚¨áÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞: ‚¨áÔ∏è", reply_markup=keyboard)

        elif call.data == "submenu:customer_module":
            await state.update_data(previous_menu="menu:customer_module")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –í–ò–°", callback_data="submenu:integration_vis")],
                [InlineKeyboardButton(text="üñäÔ∏è –í—ã–ø—É—Å–∫ –≠–¶–ü –∏ –ú–ß–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:issue_digital_signature")],
                [InlineKeyboardButton(text="üìù –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="submenu:sign_participants")],
                [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ü–î/–†–î –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data="submenu:upload_pd_rd")],
                [InlineKeyboardButton(text="üìë –û–±–º–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π", callback_data="submenu:exchange_docs")],
                [InlineKeyboardButton(text="üßë‚Äç‚öñÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –º–æ–¥—É–ª–µ –∑–∞–∫–∞–∑—â–∏–∫–∞", callback_data="submenu:construction_control")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:instruction_schedule")]
            ])
            await call.message.edit_text("üìÇ –†–∞–∑–¥–µ–ª '–ú–æ–¥—É–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞':‚¨áÔ∏è", reply_markup=keyboard)

        elif call.data == "submenu:fill_tim_report":
            await state.update_data(previous_menu="menu:instruction_schedule")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –¢–ò–ú",
                                      callback_data="submenu:fill_tim_data")],
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¢–ò–ú –∏ –¶–ò–ú-–º–æ–¥–µ–ª–∏",
                                      callback_data="submenu:add_tim_requirements")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:instruction_schedule")]
            ])
            await call.message.edit_text(text="üìÇ –†–∞–∑–¥–µ–ª '–û—Ç—á–µ—Ç –¢–ò–ú':‚¨áÔ∏è", reply_markup=keyboard)

        elif call.data == "submenu:fill_tim_data":
            await state.update_data(previous_menu="menu:fill_tim_report")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="submenu:fill_tim_report")]
            ])
            await add_tim_1(call)

        elif call.data == "submenu:add_tim_requirements":
            await state.update_data(previous_menu="submenu:fill_tim_report")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="submenu:fill_tim_report")]
            ])
            await add_tim_2(call)

        elif call.data == "submenu:integration_vis":
            await state.update_data(previous_menu="menu:instruction_schedule")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –®–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞",
                                      callback_data="submenu:add_vis_1")],
                [InlineKeyboardButton(text="‚ûï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã",
                                      callback_data="submenu:add_vis_2")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:instruction_schedule")]
            ])
            await call.message.edit_text(text_answers["instruction_text"], reply_markup=keyboard)

        elif call.data == "submenu:add_vis_1":
            await state.update_data(previous_menu="submenu:integration_vis")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="submenu:integration_vis")]
            ])
            await add_vis_11(call)

        elif call.data == "submenu:add_vis_2":
            await state.update_data(previous_menu="submenu:integration_vis")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="submenu:integration_vis")]
            ])
            await add_vis_22(call)

        elif call.data == "submenu:add_object":
            await send_add_object_file(call)

        elif call.data == "submenu:forgot_password":
            await forgot_password_handler(call)

        elif call.data == "submenu:keg":
            await send_keg_instruction(call)

        elif call.data == "menu:back":
            await back_to_previous_menu(call, state)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é

        elif call.data == "menu:back_to_main7":
            # –í—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await return_to_main_menu7(call, state)

        elif call.data == "submenu:add_user":
            await state.update_data(previous_menu="menu:add_object_user")
            await send_add_user_file(call)

        elif call.data == "menu:subscribe":
            await send_subscription_links(call)

        elif call.data == "submenu:documents":
            await send_documents_link(call)

        elif call.data == "submenu:issue_digital_signature":
            await issue_digital_signature(call)

        elif call.data == "submenu:info":
            await info1(call)

        elif call.data == "submenu:add_photo_docs":
            await send_road(call)

        elif call.data == "submenu:add_docs":
            await add_dock_1(call)

        elif call.data == "submenu:add_contr_1":
            await add_contr(call)

        elif call.data == "submenu:fill_object_card":
            await object_card(call)

        elif call.data == "submenu:construction_control":
            await construction_control1(call)

        elif call.data == "submenu:sign_participants":
            await sign_participants1(call)

        elif call.data == "submenu:upload_pd_rd":
            await upload_pd_rd1(call)

        elif call.data == "submenu:exchange_docs":
            await exchange_docs1(call)

        elif call.data == "submenu:block_user":
            await block_user1(call)

        elif call.data == "submenu:tech_support":
            await tech_support1(call)


        await call.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await call.answer("–ö–Ω–æ–ø–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ ‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞,–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞, –æ—á–∏—Å—Ç–∏—Ç–µ –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –±–æ—Ç–æ–º –∏ –Ω–∞–∂–º–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ, —á—Ç–æ–±—ã –≤—Å—ë –∑–∞—Ä–∞–±–æ—Ç–∞–ª–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.", show_alert=True)


@dp.message(StateFilter(Feedback.waiting_for_message))
async def process_feedback_message(message: types.Message, state: FSMContext):
    user_message = message.text
    user_name = message.from_user.full_name
    user_id = message.from_user.id

    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name} (ID: {user_id})\n\n"
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    confirmation_msg = await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ {user_name} –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(feedback_msg_id=confirmation_msg.message_id)

    await state.clear()


async def main():
    await init_db()  # –°–æ–∑–¥–∞—ë–º –ë–î –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    await dp.start_polling(bot)  # –ó–∞–ø—É—Å–∫ polling –¥–ª—è –±–æ—Ç–∞
if __name__ == "__main__":
    asyncio.run(main())