import os
import sys
from aiogram import F
import asyncio
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram import Bot, Dispatcher, types
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile
)
from aiogram.filters import CommandStart
from decorators_for_bot import show_progress, catch_exceptions, check_file_exists,file_attachments
# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏
sys.path.append(os.path.join(os.path.dirname(__file__), 'text1.py'))
from text1 import text_answers
import logging

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

ADMIN_IDS = [1316342598]

TOKEN = "7328447831:AAGQ7ncM4WSfLrgxOomkjRH5Azy-mYipVgk"

bot = Bot(token=TOKEN)
dp = Dispatcher()

class Feedback(StatesGroup):
    waiting_for_message = State()


logging.basicConfig(level=logging.INFO)


async def return_to_main_menu7(call: CallbackQuery, state: FSMContext):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    # –û—á–∏—Å—Ç–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await call.message.delete()
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    try:
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")


def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí° –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–°–£–ü? / –ù–ü–ê üìë", callback_data="menu:about_isup")],
        [InlineKeyboardButton(text="üõ†Ô∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="menu:add_object_user")],
        [InlineKeyboardButton(text="üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="menu:instruction_schedule")],
        [InlineKeyboardButton(text="üì≤ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã", callback_data="menu:subscribe")],
        [InlineKeyboardButton(text="üìß –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏", callback_data="menu:feedback")],
    ])

def get_back_button():
    return InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")

@dp.message(CommandStart())
async def start_command(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! ü§ñ\n"
        "–≠—Ç–æ —á–∞—Ç-–±–æ—Ç –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ –≤ –ò–°–£–ü üèóÔ∏è\n\n"
        "<a href='https://t.me/+ObD-6zTF1ngzNjgy'>üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—á–∏–π —á–∞—Ç</a>",
        reply_markup=main_menu(),
        parse_mode="HTML"
    )

@dp.callback_query()
async def menu_handler(call: CallbackQuery, state: FSMContext):
    try:
        if call.data == "menu:feedback":
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]]
            )

            try:
                await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            except Exception as e:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            await bot.send_message(
                call.message.chat.id,
                "‚úçÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞,\n –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:",
                reply_markup=keyboard
            )
            await state.set_state(Feedback.waiting_for_message)

        elif call.data == "menu:add_object_user":
            await state.update_data(previous_menu="menu:add_object_user")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:add_user")],
                [InlineKeyboardButton(text="üè¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="submenu:add_object")],
                [InlineKeyboardButton(text="üîë –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="submenu:forgot_password")],
                [InlineKeyboardButton(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:block_user")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
            ])
            await call.message.edit_text("‚¨áÔ∏è–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", reply_markup=keyboard)

        elif call.data == "menu:about_isup":
            await state.update_data(previous_menu="menu:about_isup")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üåü –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–°–£–ü", callback_data="submenu:advantages")],
                [InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –ù–ü–ê", callback_data="submenu:documents")],
                [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="submenu:info")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
            ])
            await call.message.edit_text("‚¨áÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–°–£–ü? / –ù–ü–ê: ‚¨áÔ∏è", reply_markup=keyboard)

        elif call.data == "submenu:advantages":
            await state.update_data(previous_menu="menu:about_isup")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
            ])
            await call.message.edit_text(
                text_answers["what_is_isup"],
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        elif call.data == "menu:instruction_schedule":
            await state.update_data(previous_menu="menu:instruction_schedule")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üè¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–∞", callback_data="submenu:fill_object_card")],
                [InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ-—Å–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫", callback_data="submenu:keg")],
                [InlineKeyboardButton(text="üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="submenu:add_photo_docs")],
                [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", callback_data="submenu:add_docs")],
                [InlineKeyboardButton(text="üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –¢–ò–ú", callback_data="submenu:fill_tim_report")],
                [InlineKeyboardButton(text="üìû –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="submenu:tech_support")],
                [InlineKeyboardButton(text="üßë‚Äçüíº –ú–æ–¥—É–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="submenu:customer_module")],
                [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
            ])
            await call.message.edit_text("‚¨áÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞: ‚¨áÔ∏è", reply_markup=keyboard)

        elif call.data == "submenu:customer_module":
            await state.update_data(previous_menu="menu:customer_module")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîó –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –í–ò–°", callback_data="submenu:integration_vis")],
                [InlineKeyboardButton(text="üñäÔ∏è –í—ã–ø—É—Å–∫ –≠–¶–ü –∏ –ú–ß–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:issue_digital_signature")],
                [InlineKeyboardButton(text="üìù –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="submenu:sign_participants")],
                [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ü–î/–†–î –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data="submenu:upload_pd_rd")],
                [InlineKeyboardButton(text="üìë –û–±–º–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π", callback_data="submenu:exchange_docs")],
                [InlineKeyboardButton(text="üßë‚Äç‚öñÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –º–æ–¥—É–ª–µ –∑–∞–∫–∞–∑—â–∏–∫–∞", callback_data="submenu:construction_control")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:instruction_schedule")]
            ])
            await call.message.edit_text("üìÇ –†–∞–∑–¥–µ–ª '–ú–æ–¥—É–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞':‚¨áÔ∏è", reply_markup=keyboard)

        elif call.data == "submenu:fill_tim_report":
            await state.update_data(previous_menu="menu:instruction_schedule")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –¢–ò–ú",
                                      callback_data="submenu:fill_tim_data")],
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¢–ò–ú –∏ –¶–ò–ú-–º–æ–¥–µ–ª–∏",
                                      callback_data="submenu:add_tim_requirements")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:instruction_schedule")]
            ])
            await call.message.edit_text(text="üìÇ –†–∞–∑–¥–µ–ª '–û—Ç—á–µ—Ç –¢–ò–ú':‚¨áÔ∏è", reply_markup=keyboard)

        elif call.data == "submenu:fill_tim_data":
            await state.update_data(previous_menu="menu:fill_tim_report")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="submenu:fill_tim_report")]
            ])
            await add_tim_1(call)

        elif call.data == "submenu:add_tim_requirements":
            await state.update_data(previous_menu="submenu:fill_tim_report")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="submenu:fill_tim_report")]
            ])
            await add_tim_2(call)

        elif call.data == "submenu:integration_vis":
            await state.update_data(previous_menu="menu:instruction_schedule")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ –®–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞",
                                      callback_data="submenu:add_vis_1")],
                [InlineKeyboardButton(text="‚ûï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã",
                                      callback_data="submenu:add_vis_2")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:instruction_schedule")]
            ])
            await call.message.edit_text(text_answers["instruction_text"], reply_markup=keyboard)

        elif call.data == "submenu:add_vis_1":
            await state.update_data(previous_menu="submenu:integration_vis")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="submenu:integration_vis")]
            ])
            await add_vis_11(call)

        elif call.data == "submenu:add_vis_2":
            await state.update_data(previous_menu="submenu:integration_vis")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="submenu:integration_vis")]
            ])
            await add_vis_22(call)

        elif call.data == "submenu:add_object":
            await send_add_object_file(call)

        elif call.data == "submenu:forgot_password":
            await forgot_password_handler(call)

        elif call.data == "submenu:keg":
            await send_keg_instruction(call)

        elif call.data == "menu:back":
            await back_to_previous_menu(call, state)  # –í–æ–∑–≤—Ä–∞—Ç –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –º–µ–Ω—é

        elif call.data == "menu:back_to_main7":
            # –í—ã–∑–æ–≤–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await return_to_main_menu7(call, state)

        elif call.data == "submenu:add_user":
            await state.update_data(previous_menu="menu:add_object_user")
            await send_add_user_file(call)

        elif call.data == "menu:subscribe":
            await send_subscription_links(call)

        elif call.data == "submenu:documents":
            await send_documents_link(call)

        elif call.data == "submenu:issue_digital_signature":
            await issue_digital_signature(call)

        elif call.data == "submenu:info":
            await info1(call)

        elif call.data == "submenu:add_photo_docs":
            await send_road(call)

        elif call.data == "submenu:add_docs":
            await add_dock_1(call)

        elif call.data == "submenu:fill_object_card":
            await object_card(call)

        elif call.data == "submenu:construction_control":
            await construction_control1(call)

        elif call.data == "submenu:sign_participants":
            await sign_participants1(call)

        elif call.data == "submenu:upload_pd_rd":
            await upload_pd_rd1(call)

        elif call.data == "submenu:exchange_docs":
            await exchange_docs1(call)

        elif call.data == "submenu:block_user":
            await block_user1(call)

        await call.answer()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", show_alert=True)



async def return_to_main_menu(call: CallbackQuery, state: FSMContext, menu_key: str = None):
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –∏–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    data = await state.get_data()
    previous_menu = menu_key or data.get("previous_menu")

    # –ö–∞—Ä—Ç–∞ –º–µ–Ω—é –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä
    menu_mapping = {
        "menu:add_object_user": "‚¨áÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        "menu:about_isup": "‚¨áÔ∏è –ß—Ç–æ —Ç–∞–∫–æ–µ –ò–°–£–ü? / –ù–ü–ê: ‚¨áÔ∏è",
        "menu:instruction_schedule": "‚¨áÔ∏è –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞: ‚¨áÔ∏è",
        "menu:integration_vis": "‚¨áÔ∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –í–ò–° ‚¨áÔ∏è",
        "menu:customer_module": "‚¨áÔ∏è  –ú–æ–¥—É–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞ ‚¨áÔ∏è",
        "menu:fill_tim_report": "‚¨áÔ∏è  –†–∞–∑–¥–µ–ª '–û—Ç—á–µ—Ç –¢–ò–ú'‚¨áÔ∏è",
    }

    keyboard_mapping = {
        "menu:add_object_user": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:add_user")],
            [InlineKeyboardButton(text="üè¢ –î–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç", callback_data="submenu:add_object")],
            [InlineKeyboardButton(text="üîë –ó–∞–±—ã–ª–∏ –ø–∞—Ä–æ–ª—å?", callback_data="submenu:forgot_password")],
            [InlineKeyboardButton(text="üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:block_user")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
        ]),
        "menu:about_isup": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üåü –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ò–°–£–ü", callback_data="submenu:advantages")],
            [InlineKeyboardButton(text="üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã –ù–ü–ê", callback_data="submenu:documents")],
            [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="submenu:info")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
        ]),
        "menu:instruction_schedule": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üè¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –æ–±—ä–µ–∫—Ç–∞", callback_data="submenu:fill_object_card")],
            [InlineKeyboardButton(text="üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä–Ω–æ-—Å–µ—Ç–µ–≤–æ–π –≥—Ä–∞—Ñ–∏–∫", callback_data="submenu:keg")],
            [InlineKeyboardButton(text="üñºÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ç–æ", callback_data="submenu:add_photo_docs")],
            [InlineKeyboardButton(text="üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏", callback_data="submenu:add_docs")],
            [InlineKeyboardButton(text="üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –¢–ò–ú", callback_data="submenu:fill_tim_report")],
            [InlineKeyboardButton(text="üìû –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É", callback_data="submenu:tech_support")],
            [InlineKeyboardButton(text="üßë‚Äçüíº –ú–æ–¥—É–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="submenu:customer_module")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back_to_main7")]
        ]),
        "menu:integration_vis": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –®–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞", callback_data="submenu:add_vis_1")],
            [InlineKeyboardButton(text="‚ûï –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Ñ–æ—Ä–º—ã", callback_data="submenu:add_vis_2")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:customer_module")]
        ]),
        "menu:fill_tim_report": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìä –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞ –¢–ò–ú", callback_data="submenu:fill_tim_data")],
            [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫ –¢–ò–ú –∏ –¶–ò–ú-–º–æ–¥–µ–ª–∏",
                                  callback_data="submenu:add_tim_requirements")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:instruction_schedule")]
        ]),

        "menu:customer_module": InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîó –ü–µ—Ä–≤–∏—á–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –í–ò–°", callback_data="submenu:integration_vis")],
            [InlineKeyboardButton(text="üñäÔ∏è –í—ã–ø—É—Å–∫ –≠–¶–ü –∏ –ú–ß–î –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="submenu:issue_digital_signature")],
            [InlineKeyboardButton(text="üìù –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="submenu:sign_participants")],
            [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ü–î/–†–î –∏ –ø–µ—Ä–µ–¥–∞—á–∞ –≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", callback_data="submenu:upload_pd_rd")],
            [InlineKeyboardButton(text="üìë –û–±–º–µ–Ω –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π", callback_data="submenu:exchange_docs")],
            [InlineKeyboardButton(text="üßë‚Äç‚öñÔ∏è –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ –º–æ–¥—É–ª–µ –∑–∞–∫–∞–∑—á–∏–∫–∞", callback_data="submenu:construction_control")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:instruction_schedule")]
        ])
    }

    if previous_menu and previous_menu in menu_mapping:
        try:
            await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await call.message.answer(
                menu_mapping[previous_menu],
                reply_markup=keyboard_mapping.get(previous_menu, main_menu())  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            )
            await state.update_data(previous_menu=previous_menu)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
            return
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    # –ï—Å–ª–∏ previous_menu –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await state.clear()
    try:
        await call.message.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if data.get("feedback_msg_id"):
            await bot.delete_message(call.message.chat.id, data["feedback_msg_id"])
    except Exception as e:
        logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")

    try:
        await call.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é: {e}")


@dp.callback_query(F.data == "menu:back")
async def back_to_previous_menu(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'."""
    await return_to_main_menu(call, state)

@dp.callback_query(F.data == "menu:customer_module")
async def show_customer_module(call: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –≤ –º–æ–¥—É–ª—å –∑–∞–∫–∞–∑—á–∏–∫–∞."""
    await return_to_main_menu(call, state, "menu:customer_module")


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('exchange_docs11')
async def exchange_docs1(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await call.bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('sign_participants11')
async def sign_participants1(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await call.bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('upload_pd_rd11')
async def upload_pd_rd1(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await call.bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('construction_control11')
async def construction_control1(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await call.bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('object_card_1')
async def object_card(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await call.bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('vis_1')
async def add_vis_11(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await call.bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ —à–∞–±–ª–æ–Ω –∑–∞—è–≤–∫–∏ –¥–ª—è –≤–≤–æ–¥–∞üìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('vis_2')
async def add_vis_22(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await call.bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('tim1')
async def add_tim_1(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await call.bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('tim2')
async def add_tim_2(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)
    await call.message.delete()

    await bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('dock_1')
async def add_dock_1(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)

    await call.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    await bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )

@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('road')
async def send_road(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)

    await call.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    await bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )

@show_progress(total_steps=5, step_delay=0.05)
@catch_exceptions()
@check_file_exists('instruction_schedule')
async def send_keg_instruction(call: CallbackQuery, file_path: str):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]]
    )

    doc = FSInputFile(file_path)

    await call.message.delete()  # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è

    await bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="‚¨ÜÔ∏è –ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –∏ –∏–∑—É—á–∏—Ç—å –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüìÑ",
        reply_markup=keyboard
    )


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ (—à–∞–±–ª–æ–Ω –∏–º–ø–æ—Ä—Ç–∞ –æ–±—ä–µ–∫—Ç–æ–≤)
@show_progress(total_steps=5, step_delay=0.05)
async def send_add_object_file(call: CallbackQuery):
    file_path = file_attachments['add_object']
    doc = FSInputFile(file_path)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
    )
    try:
        await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption="–®–∞–±–ª–æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email:üì© isup@kgexpert.ru",
        reply_markup=keyboard
    )


async def send_add_user_file(call: CallbackQuery):
    file_path = file_attachments['add_user']
    doc = FSInputFile(file_path)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
    )
    try:
        await call.message.delete()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    await bot.send_document(
        chat_id=call.message.chat.id,
        document=doc,
        caption=(
            "–®–∞–±–ª–æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ email:üì© isup@kgexpert.ru\n\n"
            "‚ùó‚ùó‚ùó‚ùó **–í–ê–ñ–ù–û!** ‚ùó‚ùó‚ùó‚ùó\n\n"
            "–û–±—Ä–∞—â–∞–µ–º –í–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ:\n"
            "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏)!\n"
            "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω–∞ –∏–º–µ—Ç—å –¥–æ–º–µ–Ω '.ru'!"
        ),
        reply_markup=keyboard
    )

async def send_subscription_links(call: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîó –†–∞–±–æ—á–∏–π —á–∞—Ç", url="https://t.me/+ObD-6zTF1ngzNjgy")],
            [InlineKeyboardButton(text="üîó –û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –ò–°–£–ü", url="https://t.me/isup_KK")],
            [InlineKeyboardButton(text="üîó –ö–∞–Ω–∞–ª –∑–∞–º. —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è –¥–µ–ø. —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–æ–≥–æ –∫—Ä–∞—è\n–∫—É—Ä–∏—Ä—É—é—â–µ–≥–æ –ò–°–£–ü, –ê—Ä—Ç–µ–º–∞ –ú–æ–∏—Å–µ–µ–≤–∞",
    url="https://t.me/moiseevArtemA")],
            [InlineKeyboardButton(text="üîô –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="menu:back")]
        ]
    )
    await call.message.edit_text(
        "üì≤ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤–∞–∂–Ω—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=keyboard
    )

async def send_documents_link(call: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å üìÇ", url="https://cloud.mail.ru/public/UXKs/8rfz3hx5P")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
    )
    await call.message.edit_text(
        "üìÑ –í –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–±—Ä–∞–Ω—ã –≤—Å–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ù–ü–ê..\n\n"
        "üîó <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def info1(call: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üåê –û—Ç–∫—Ä—ã—Ç—å üìÇ", url="https://cloud.mail.ru/public/qWYN/gkQvCBHbA")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
    )
    await call.message.edit_text(
        "üìÑ –í –æ–±–ª–∞—á–Ω–æ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, —Å–æ–±—Ä–∞–Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∞—è —Å–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.\n\n"
        "üîó <b>–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@dp.callback_query(F.data == "submenu:forgot_password")
async def forgot_password_handler(call: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
    )
    await call.message.edit_text(text_answers["forgot_password"], reply_markup=keyboard)


async def block_user1(call: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
    )
    await call.message.edit_text(text_answers["block_text"], reply_markup=keyboard)


@dp.callback_query(F.data == "submenu:issue_digital_signature")
async def issue_digital_signature(call: CallbackQuery):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="menu:back")]
        ]
    )
    await call.message.edit_text(
        text=text_answers["electronic_signature"],
        reply_markup=keyboard,
        parse_mode="HTML"
    )


@dp.message(StateFilter(Feedback.waiting_for_message))
async def process_feedback_message(message: types.Message, state: FSMContext):
    user_message = message.text
    user_name = message.from_user.full_name
    user_id = message.from_user.id

    for admin_id in ADMIN_IDS:
        await bot.send_message(
            admin_id,
            f"üìù –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name} (ID: {user_id})\n\n"
            f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ: {user_message}"
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç–≤–µ—Ç –∏ –∑–∞–ø–æ–º–∏–Ω–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    confirmation_msg = await message.answer(
        f"‚úÖ –°–ø–∞—Å–∏–±–æ {user_name} –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(feedback_msg_id=confirmation_msg.message_id)

    await state.clear()

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
